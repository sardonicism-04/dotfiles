#!/usr/bin/python3
import re
import os
import pathlib

PATH = "" # Set this if you have a non-standard i3 config location
COMMENT_BEGIN = "##" # The pattern that will be searched for to begin a comment
COMMENT_CLOSE = "##" # The pattern that will be searched for to close a comment

# By default, the script will look for the following format:

# # ## A comment for a bindsym ##
# bindsym $mod+Shift+S exec something

# This can be changed by changing the COMMENT_BEGIN and COMMENT_CLOSE patterns
# The hotkey patterns won't change because they need to be like that lol

GET_KEYBINDS = re.compile(fr"# {COMMENT_BEGIN} .* {COMMENT_CLOSE}\nbindsym .+")
PARSE_COMMENT = re.compile(fr"# {COMMENT_BEGIN} (.*) {COMMENT_CLOSE}")

# Find the i3 config file if it is not specified by the user
if not PATH:
    PATHS = [
        "~/.config/i3/config",
        "{}/i3/config".format(os.getenv("XDG_CONFIG_HOME")),
        "~/.i3/config",
        "/etc/xdg/i3/config",
        "{}/i3/config".format(os.getenv("XDG_CONFIG_DIRS")),
        "/etc/i3/config"
    ]
    for path in PATHS:
        if pathlib.Path(path).expanduser().exists():
            PATH = path
            break

    else:
        raise FileNotFoundError("Couldn't find an existing i3 config file")

CONFIG = pathlib.Path(PATH).expanduser()

class i3ConfigParser:

    def __init__(self, file):
        self.file = file

    @staticmethod
    def parse_hotkey(line):
        """
        Parse a bindsym line and return its hotkey
        """
        return line.split(" ")[1] \
            .replace("+", " + ") \
            .replace("$mod", "Óúè") # This just looks neat (replaces $mod with a windows key icon)

    @staticmethod
    def parse_comment(line):
        """
        Extract the desired comment from a bindsym line
        `# ## some comment ##` is returned as "some comment"
        """
        return PARSE_COMMENT.match(line)[1]

    def parse_file(self):
        """
        Parses the config file, yielding formatted entries
        """
        with self.file.open() as _f:
            for match in GET_KEYBINDS.findall(_f.read()):
                match = match.splitlines()
                comment = self.parse_comment(match[0])
                keybind = self.parse_hotkey(match[1])

                yield "<b>{0}:</b> {1}".format(keybind, comment)

    def dmenu_output(self):
        """
        Dumps the parsed entries for dmenu to use
        """
        print("\n".join(self.parse_file()))

parser = i3ConfigParser(CONFIG)
parser.dmenu_output()
